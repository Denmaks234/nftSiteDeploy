@use "sass:math";
@import "vars";
@import "functions";

// !Адаптивное свойство (clamp)
@mixin adaptiveClamp($property, $start-size, $min-size, $width-from: $container-width, $width-to: $min-width, $keep-size: 0) {
	// Для calc();
	$addSize: math.div($start-size - $min-size, 16);

	@if ($width-from == $container-width and $max-width-container == 0) {
		$widthFrom: $max-width;
	}
	@if ($min-size <= 0) {
		$minSize: 0.0001;
	}
	@if ($start-size <= 0) {
		$startSize: 0.0001;
	}

	// Брейк-поинты в EM
	$widthFromMedia: em($width-from);
	$widthToMedia: em($width-to);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($start-size - $min-size), ($width-from - $width-to));
	$yIntersection: -$width-to * $slope + $min-size;
	$flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

	// Получение значения свойства
	$propertyValue: #{"clamp(" rem($min-size) "," $flyValue "," rem($start-size) ")"};
	// Если отрицательные значения
	@if ($min-size > $start-size) {
		$propertyValue: #{"clamp(" rem($start-size) "," $flyValue "," rem($min-size) ")"};
	}

	@if $width-from == $container-width or $width-from == $max-width or $keep-size == 1 or $keep-size == 2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($start-size);
		}
	}
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		// Если поддерживается clamp();
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}
		// Если не поддерживается clamp();
		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(
				#{rem($min-size)} + #{$addSize} * (100vw - #{rem($width-to)}) / #{math.div($width-from, 16) - math.div($width-to, 16)}
			);
		}
	}
	@if $width-to == $min-width or $keep-size == 1 or $keep-size == 3 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($min-size);
		}
	}
}

// !gradient for text
@mixin text-gradient($gradient) {
	background: $gradient;
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
}

@mixin media-mx($value) {
	$width: em($value);

	@media (max-width: $width) {
		@content;
	}
}

@mixin media-mn($value) {
	$width: em($value + 0.98);

	@media (min-width: $width) {
		@content;
	}
}

@mixin any-hover() {
	@media (any-hover: hover) {
		&:hover {
			@content;
		}
	}
}

// !:not (last-child)
@mixin not-last() {
	&:not(:last-child) {
		@content;
	}
}

// !:not (first-child)
@mixin not-first() {
	&:not(:first-child) {
		@content;
	}
}

// !обрезает текст до определенного кол-ва строк, остаток заменяет на 3 точки (...)
@mixin line-clamp($value) {
	display: -webkit-box;
	-webkit-line-clamp: $value;
	-webkit-box-orient: vertical;
	overflow: hidden;
}

// !styled placeholder for TextArea
@mixin styled-placeholder($color, $fontSize: inherit, $lineHeight: normal) {
	&:-moz-placeholder,
	&::-moz-placeholder,
	&::-webkit-input-placeholder,
	&:-ms-input-placeholder {
		color: $color;
		font-size: $fontSize;
		line-height: $lineHeight;
	}
}

// !плавное убирание placeholder
@mixin hide-placeholder($time: 300, $effect: ease) {
	&::-webkit-input-placeholder,
	&::-moz-placeholder,
	&:-moz-placeholder,
	&:-ms-input-placeholder {
		opacity: 1;
		transition: opacity #{$time} + ms $effect;
	}

	&:focus {
		&::-webkit-input-placeholder,
		&::-moz-placeholder,
		&:-moz-placeholder,
		&:-ms-input-placeholder {
			opacity: 0;
			transition: opacity #{$time} + ms $effect;
		}
	}
}

// !after-before
@mixin pseudo-cell($type, $pos: absolute) {
	&::#{$type} {
		content: "";
		position: $pos;
		@content;
	}
}
